diff -U 3 -H -d -r -N -- /home/canita/work/patches/selectable-socketpair-master-orig/socketpair.c /home/canita/work/patches/selectable-socketpair-master/socketpair.c
--- /home/canita/work/patches/selectable-socketpair-master-orig/socketpair.c	2014-02-13 00:51:51.000000000 +0200
+++ /home/canita/work/patches/selectable-socketpair-master/socketpair.c	2017-01-28 12:35:57.000000000 +0200
@@ -1,3 +1,6 @@
+// https://github.com/ncm/selectable-socketpair
+
+
 /* socketpair.c
 Copyright 2007, 2010 by Nathan C. Myers <ncm@cantrip.org>
 Redistribution and use in source and binary forms, with or without modification,
@@ -48,48 +51,49 @@
  *   add argument make_overlapped
  */
 
-#include <string.h>
 
-#ifdef WIN32
-# include <ws2tcpip.h>  /* socklen_t, et al (MSVC20xx) */
-# include <windows.h>
-# include <io.h>
-#else
-# include <sys/types.h>
-# include <sys/socket.h>
-# include <errno.h>
+#include <cppdevtk/util/socket_pair.hpp>
+#if (!CPPDEVTK_PLATFORM_WINDOWS)
+#	error "This file is Windows specific!!!"
 #endif
+#include <cppdevtk/base/dbc.hpp>
+#include <cppdevtk/base/cerrno.hpp>
 
-#ifdef WIN32
+#include <cstddef>
+#include <string.h>
 
-/* dumb_socketpair:
- *   If make_overlapped is nonzero, both sockets created will be usable for
- *   "overlapped" operations via WSASend etc.  If make_overlapped is zero,
- *   socks[0] (only) will be usable with regular ReadFile etc., and thus
- *   suitable for use as stdin or stdout of a child process.  Note that the
- *   sockets must be closed with closesocket() regardless.
- */
+#include <ws2tcpip.h>  /* socklen_t, et al (MSVC20xx) */
+#include <windows.h>
+#include <io.h>
 
-int dumb_socketpair(SOCKET socks[2], int make_overlapped)
-{
+
+namespace cppdevtk {
+namespace util {
+
+
+CPPDEVTK_UTIL_API int SocketPair(socket_t socketVector[2], bool makeOverlapped) {
     union {
        struct sockaddr_in inaddr;
        struct sockaddr addr;
     } a;
+	
+	
     SOCKET listener;
     int e;
     socklen_t addrlen = sizeof(a.inaddr);
-    DWORD flags = (make_overlapped ? WSA_FLAG_OVERLAPPED : 0);
+    DWORD flags = (makeOverlapped ? WSA_FLAG_OVERLAPPED : 0);
     int reuse = 1;
-
-    if (socks == 0) {
+	
+	
+	CPPDEVTK_DBC_CHECK_NON_NULL_ARGUMENT(socketVector);
+    if (socketVector == NULL) {
       WSASetLastError(WSAEINVAL);
       return SOCKET_ERROR;
     }
-    socks[0] = socks[1] = -1;
+    socketVector[0] = socketVector[1] = INVALID_SOCKET;
 
     listener = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
-    if (listener == -1)
+    if (listener == INVALID_SOCKET)
         return SOCKET_ERROR;
 
     memset(&a, 0, sizeof(a));
@@ -99,7 +103,7 @@
 
     for (;;) {
         if (setsockopt(listener, SOL_SOCKET, SO_REUSEADDR,
-               (char*) &reuse, (socklen_t) sizeof(reuse)) == -1)
+               (char*) &reuse, (socklen_t) sizeof(reuse)) == SOCKET_ERROR)
             break;
         if  (bind(listener, &a.addr, sizeof(a.inaddr)) == SOCKET_ERROR)
             break;
@@ -115,38 +119,31 @@
         if (listen(listener, 1) == SOCKET_ERROR)
             break;
 
-        socks[0] = WSASocket(AF_INET, SOCK_STREAM, 0, NULL, 0, flags);
-        if (socks[0] == -1)
+        socketVector[0] = WSASocket(AF_INET, SOCK_STREAM, 0, NULL, 0, flags);
+        if (socketVector[0] == INVALID_SOCKET)
             break;
-        if (connect(socks[0], &a.addr, sizeof(a.inaddr)) == SOCKET_ERROR)
+        if (connect(socketVector[0], &a.addr, sizeof(a.inaddr)) == SOCKET_ERROR)
             break;
 
-        socks[1] = accept(listener, NULL, NULL);
-        if (socks[1] == -1)
+        socketVector[1] = accept(listener, NULL, NULL);
+        if (socketVector[1] == INVALID_SOCKET)
             break;
 
         closesocket(listener);
-        return 0;
+		
+        return ESUCCESS;
     }
 
     e = WSAGetLastError();
     closesocket(listener);
-    closesocket(socks[0]);
-    closesocket(socks[1]);
+    closesocket(socketVector[0]);
+    closesocket(socketVector[1]);
     WSASetLastError(e);
-    socks[0] = socks[1] = -1;
+    socketVector[0] = socketVector[1] = INVALID_SOCKET;
+	
     return SOCKET_ERROR;
 }
-#else
-int dumb_socketpair(int socks[2], int dummy)
-{
-    if (socks == 0) {
-        errno = EINVAL;
-        return -1;
-    }
-    dummy = socketpair(AF_LOCAL, SOCK_STREAM, 0, socks);
-    if (dummy)
-        socks[0] = socks[1] = -1;
-    return dummy;
-}
-#endif
+
+
+}	// namespace util
+}	// namespace cppdevtk
