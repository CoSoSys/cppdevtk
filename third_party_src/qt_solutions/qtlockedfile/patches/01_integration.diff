diff -U 3 -H -d -r -N -- /home/canita/work/patches/qtlockedfile-orig/src/qtlockedfile.cpp /home/canita/work/patches/qtlockedfile/src/qtlockedfile.cpp
--- /home/canita/work/patches/qtlockedfile-orig/src/qtlockedfile.cpp	2015-06-29 06:40:52.000000000 +0300
+++ /home/canita/work/patches/qtlockedfile/src/qtlockedfile.cpp	2017-01-28 12:35:57.000000000 +0200
@@ -38,7 +38,14 @@
 **
 ****************************************************************************/
 
-#include "qtlockedfile.h"
+
+#include <cppdevtk/util/qt_locked_file.hpp>
+#include <cppdevtk/base/logger.hpp>
+
+
+namespace cppdevtk {
+namespace util {
+
 
 /*!
     \class QtLockedFile
@@ -123,7 +130,7 @@
 bool QtLockedFile::open(OpenMode mode)
 {
     if (mode & QIODevice::Truncate) {
-        qWarning("QtLockedFile::open(): Truncate mode not allowed.");
+        CPPDEVTK_LOG_WARN("Truncate mode not allowed.");
         return false;
     }
     return QFile::open(mode);
@@ -191,3 +198,7 @@
     Destroys the \e QtLockedFile object. If any locks were held, they
     are released.
 */
+
+
+}	// namespace util
+}	// namespace cppdevtk
diff -U 3 -H -d -r -N -- /home/canita/work/patches/qtlockedfile-orig/src/qtlockedfile.h /home/canita/work/patches/qtlockedfile/src/qtlockedfile.h
--- /home/canita/work/patches/qtlockedfile-orig/src/qtlockedfile.h	2015-06-29 06:40:52.000000000 +0300
+++ /home/canita/work/patches/qtlockedfile/src/qtlockedfile.h	2017-01-28 12:35:55.000000000 +0200
@@ -38,31 +38,25 @@
 **
 ****************************************************************************/
 
-#ifndef QTLOCKEDFILE_H
-#define QTLOCKEDFILE_H
 
-#include <QFile>
+#ifndef CPPDEVTK_UTIL_QT_LOCKED_FILE_HPP_INCLUDED_
+#define CPPDEVTK_UTIL_QT_LOCKED_FILE_HPP_INCLUDED_
+
+
+#include "config.hpp"
+
+#include <QtCore/QtGlobal>
+#include <QtCore/QFile>
 #ifdef Q_OS_WIN
-#include <QVector>
+#include <QtCore/QVector>
 #endif
 
-#if defined(Q_OS_WIN)
-#  if !defined(QT_QTLOCKEDFILE_EXPORT) && !defined(QT_QTLOCKEDFILE_IMPORT)
-#    define QT_QTLOCKEDFILE_EXPORT
-#  elif defined(QT_QTLOCKEDFILE_IMPORT)
-#    if defined(QT_QTLOCKEDFILE_EXPORT)
-#      undef QT_QTLOCKEDFILE_EXPORT
-#    endif
-#    define QT_QTLOCKEDFILE_EXPORT __declspec(dllimport)
-#  elif defined(QT_QTLOCKEDFILE_EXPORT)
-#    undef QT_QTLOCKEDFILE_EXPORT
-#    define QT_QTLOCKEDFILE_EXPORT __declspec(dllexport)
-#  endif
-#else
-#  define QT_QTLOCKEDFILE_EXPORT
-#endif
 
-class QT_QTLOCKEDFILE_EXPORT QtLockedFile : public QFile
+namespace cppdevtk {
+namespace util {
+
+
+class CPPDEVTK_UTIL_API QtLockedFile : public QFile
 {
 public:
     enum LockMode { NoLock = 0, ReadLock, WriteLock };
@@ -92,4 +86,9 @@
     LockMode m_lock_mode;
 };
 
-#endif
+
+}	// namespace util
+}	// namespace cppdevtk
+
+
+#endif	// CPPDEVTK_UTIL_QT_LOCKED_FILE_HPP_INCLUDED_
diff -U 3 -H -d -r -N -- /home/canita/work/patches/qtlockedfile-orig/src/qtlockedfile_unix.cpp /home/canita/work/patches/qtlockedfile/src/qtlockedfile_unix.cpp
--- /home/canita/work/patches/qtlockedfile-orig/src/qtlockedfile_unix.cpp	2015-06-29 06:40:52.000000000 +0300
+++ /home/canita/work/patches/qtlockedfile/src/qtlockedfile_unix.cpp	2017-01-28 12:35:57.000000000 +0200
@@ -38,17 +38,29 @@
 **
 ****************************************************************************/
 
-#include <string.h>
-#include <errno.h>
+
+#include <cppdevtk/util/qt_locked_file.hpp>
+#if (!CPPDEVTK_PLATFORM_UNIX)
+#	error "This file is Unix specific!!!"
+#endif
+
+#include <cppdevtk/base/logger.hpp>
+#include <cppdevtk/base/cerrno.hpp>
+#include <cppdevtk/base/system_exception.hpp>
+
+#include <cstring>
 #include <unistd.h>
 #include <fcntl.h>
 
-#include "qtlockedfile.h"
+
+namespace cppdevtk {
+namespace util {
+
 
 bool QtLockedFile::lock(LockMode mode, bool block)
 {
     if (!isOpen()) {
-        qWarning("QtLockedFile::lock(): file is not opened");
+        CPPDEVTK_LOG_WARN("file is not opened");
         return false;
     }
  
@@ -71,7 +83,7 @@
     
     if (ret == -1) {
         if (errno != EINTR && errno != EAGAIN)
-            qWarning("QtLockedFile::lock(): fcntl: %s", strerror(errno));
+            CPPDEVTK_LOG_WARN("fcntl: error code: " << ::cppdevtk::base::MakeSystemErrorCode(errno).ToString());
         return false;
     }
 
@@ -84,7 +96,7 @@
 bool QtLockedFile::unlock()
 {
     if (!isOpen()) {
-        qWarning("QtLockedFile::unlock(): file is not opened");
+        CPPDEVTK_LOG_WARN("file is not opened");
         return false;
     }
 
@@ -99,7 +111,7 @@
     int ret = fcntl(handle(), F_SETLKW, &fl);
     
     if (ret == -1) {
-        qWarning("QtLockedFile::lock(): fcntl: %s", strerror(errno));
+        CPPDEVTK_LOG_WARN("fcntl: error code: " << ::cppdevtk::base::MakeSystemErrorCode(errno).ToString());
         return false;
     }
     
@@ -113,3 +125,6 @@
         unlock();
 }
 
+
+}	// namespace util
+}	// namespace cppdevtk
diff -U 3 -H -d -r -N -- /home/canita/work/patches/qtlockedfile-orig/src/qtlockedfile_win.cpp /home/canita/work/patches/qtlockedfile/src/qtlockedfile_win.cpp
--- /home/canita/work/patches/qtlockedfile-orig/src/qtlockedfile_win.cpp	2015-06-29 06:40:52.000000000 +0300
+++ /home/canita/work/patches/qtlockedfile/src/qtlockedfile_win.cpp	2017-01-28 12:35:57.000000000 +0200
@@ -38,11 +38,20 @@
 **
 ****************************************************************************/
 
-#include "qtlockedfile.h"
+
+#include <cppdevtk/util/qt_locked_file.hpp>
+#if (!CPPDEVTK_PLATFORM_WINDOWS)
+#	error "This file is Windows specific!!!"
+#endif
+
+#include <cppdevtk/base/cassert.hpp>
+#include <cppdevtk/base/logger.hpp>
+
 #include <qt_windows.h>
-#include <QFileInfo>
+#include <QtCore/QFileInfo>
+#include <QtCore/QtGlobal>
 
-#if QT_VERSION >= 0x050000
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 0, 0))
 #define QT_WA(unicode, ansi) unicode
 #endif
 
@@ -50,6 +59,11 @@
 // Maximum number of concurrent read locks. Must not be greater than MAXIMUM_WAIT_OBJECTS
 #define MAX_READERS MAXIMUM_WAIT_OBJECTS
 
+
+namespace cppdevtk {
+namespace util {
+
+
 Qt::HANDLE QtLockedFile::getMutexHandle(int idx, bool doCreate)
 {
     if (mutexname.isEmpty()) {
@@ -84,7 +98,7 @@
 
 bool QtLockedFile::waitMutex(Qt::HANDLE mutex, bool doBlock)
 {
-    Q_ASSERT(mutex);
+    CPPDEVTK_ASSERT(mutex);
     DWORD res = WaitForSingleObject(mutex, doBlock ? INFINITE : 0);
     switch (res) {
     case WAIT_OBJECT_0:
@@ -104,7 +118,7 @@
 bool QtLockedFile::lock(LockMode mode, bool block)
 {
     if (!isOpen()) {
-        qWarning("QtLockedFile::lock(): file is not opened");
+        CPPDEVTK_LOG_WARN("file is not opened");
         return false;
     }
 
@@ -133,7 +147,7 @@
         }
         bool ok = true;
         if (idx >= MAX_READERS) {
-            qWarning("QtLockedFile::lock(): too many readers");
+            CPPDEVTK_LOG_WARN("too many readers");
             rmutex = 0;
             ok = false;
         }
@@ -151,7 +165,7 @@
             return false;
     }
     else {
-        Q_ASSERT(rmutexes.isEmpty());
+        CPPDEVTK_ASSERT(rmutexes.isEmpty());
         for (int i = 0; i < MAX_READERS; i++) {
             Qt::HANDLE mutex = getMutexHandle(i, false);
             if (mutex)
@@ -177,7 +191,7 @@
 bool QtLockedFile::unlock()
 {
     if (!isOpen()) {
-        qWarning("QtLockedFile::unlock(): file is not opened");
+        CPPDEVTK_LOG_WARN("file is not opened");
         return false;
     }
 
@@ -209,3 +223,7 @@
     if (wmutex)
         CloseHandle(wmutex);
 }
+
+
+}	// namespace util
+}	// namespace cppdevtk
