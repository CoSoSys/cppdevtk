High priority:

- Our own minimal thread-safe logging implementation (currently we are using qDebug() family).
- C++ 11 style mutex (win), condition variable, thread and thread pool


Low priority:

- Our own implementation of stack trace on Windows.
Replace third party StackWalker; maybe our implementation will use CaptureStackBackTrace() (RtlCaptureStackBackTrace()) instead of StackWalk64()

- Our own ON_BLOCK_EXIT (currently using boost only for this; headers only, but huge dependency anyway)
- QtService SIGINT, SIGTERM, SIGHUP


Android not ported (search for "TODO: Android port"):
- GetFileSystemSpaceInfo(): uses statvfs() that is available in Android 4.4W2 (API level 20)
- GetUserName(): uses getpwuid_r() that is available in Android 5.0.1 (API level 21)
- GetDeviceNameFromMountPoint(), GetMountPointsFromDeviceName(), GetMountPointsFromPath(): uses setmntent() that is available in Android 5.0.1 (API level 21)
- GetDeviceName(): uses udev that is Linux specific
- IsCapsLockOn(), GetUserIdleTime(): uses X11 that is Linux specific. Checked and AFAIK there is no way to implement on Android
(it has no idle concept (only ACTION_SCREEN_OFF) and no way to detect caps lock)
- ComputerManager (ShutdownComputer/LockComputer/LogoutUser): uses DBus, KDE, Gnome that are Linux specific


iOS not ported (due to missing frameworks or fork/exec; search for "TODO: iOS port"):
- ComputerManager(ShutdownComputer/LogoutUser)
- IsCapsLockOn()
- GetUserIdleTime()
- GetMountPointsFromDeviceName()
- GetDeviceName()
- QtServiceController(install/start/), QtServiceBasePrivate::start()
